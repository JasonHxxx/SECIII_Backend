<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="team.software.collect.mapperservice.user.UserInfoMapper">
  <resultMap id="BaseResultMap" type="team.software.collect.po.user.UserInfo">
    <id column="uid" jdbcType="INTEGER" property="uid" />
    <result column="uname" jdbcType="VARCHAR" property="uname" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="user_role" jdbcType="VARCHAR" property="userRole" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <sql id="Base_Column_List">
    `uid`, uname, phone, `password`, `user_role`, create_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from user_info
    where `uid` = #{uid,jdbcType=INTEGER}
  </select>
  <select id="selectByPhone" parameterType="java.lang.String" resultMap="BaseResultMap">
    select uid, uname, phone, password, user_role, create_time
    from user_info
    where phone = #{phone}
      limit 0,1
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select uid, uname, phone, password, user_role, create_time
    from user_info
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user_info
    where `uid` = #{uid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="uid" keyProperty="uid" parameterType="team.software.collect.po.user.UserInfo" useGeneratedKeys="true">
    insert into user_info (uname, phone, `password`,
      `user_role`, create_time)
    values (#{uname,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
      #{userRole,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" keyColumn="uid" keyProperty="uid" parameterType="team.software.collect.po.user.UserInfo" useGeneratedKeys="true">
    insert into user_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="uname != null">
        uname,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="password != null">
        `password`,
      </if>
      <if test="userRole != null">
        `user_role`,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="uname != null">
        #{uname,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="userRole != null">
        #{userRole,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="team.software.collect.po.user.UserInfo">
    update user_info
    <set>
      <if test="uname != null">
        uname = #{uname,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        `password` = #{password,jdbcType=VARCHAR},
      </if>
      <if test="userRole != null">
        `user_role` = #{userRole,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where `uid` = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="team.software.collect.po.user.UserInfo">
    update user_info
    set uname = #{uname,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      `password` = #{password,jdbcType=VARCHAR},
      `user_role` = #{userRole,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where `uid` = #{uid,jdbcType=INTEGER}
  </update>
</mapper>
